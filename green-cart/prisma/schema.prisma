// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


// model Customer {
//   id        Int           @id @default(autoincrement())
//   createdAt DateTime      @default(now())
//   email     String        @unique
//   name      String?
//   password  String
//   prefferdOffset  offsetType @default(tree)
//   offsets   CarbonOrder[]
// }

// model CarbonOrder {
//   id             Int               @id @default(autoincrement())
//   createdAt      DateTime          @default(now())
//   offsetPrice    Int
//   offsetType     offsetType
//   offsetCarbonKg BigInt
//   customer       Customer?         @relation(fields: [customerId], references: [id])
//   customerId     Int?
//   listItems      CarbonOrderItem[]
// }

// model CarbonOrderItem {
//   id             Int          @id @default(autoincrement())
//   productType    String
//   offsetCost     Int
//   offsetCarbonKg BigInt
//   quantity       Int
//   carbonOrder    CarbonOrder? @relation(fields: [carbonOrderId], references: [id])
//   carbonOrderId  Int?
// }

// model Product {
//   id             Int      @id @default(autoincrement())
//   productName    String
//   productType    String
//   offsetCarbonKg BigInt
//   company        Company? @relation(fields: [companyId], references: [id])
//   companyId      Int?
// }

// model Company {
//   id             Int       @id @default(autoincrement())
//   companyName    String
//   prefferdOffset    offsetType @default(tree)
//   apiKeyGuarded  String
//   offsetCarbonKg BigInt
//   products       Product[]
// }

// enum offsetType {
//   tree
//   wind
//   solar
//   methaneDestruction
//   carbonSequestration
// }
